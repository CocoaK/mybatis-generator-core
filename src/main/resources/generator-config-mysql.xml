<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

	<!-- 配置mysql 驱动jar包路径.用了绝对路径 -->
	<classPathEntry
		location="src\main\resources\mysql-connector-java-5.1.38.jar" />

	<context id="smarthome_mysql_tables" defaultModelType="flat" targetRuntime="MyBatis3">
		<!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->

		<property name="autoDelimitKeywords" value="false"/>
		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="UTF-8"/>
		<!-- 格式化java代码 -->
		<property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
		<!-- 格式化XML代码
		<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>-->
		<!--生成的Mapper继承BaseMapper	【扩展插件】-->
		<plugin type="org.mybatis.generator.plugins.MyCustomPlugin" />
		<!--生成的Mapper.xml支持cache	【扩展插件】-->
		<plugin type="org.mybatis.generator.plugins.CachePlugin" />
		<!--&lt;!&ndash;生成的model 实现序列化	【扩展插件】&ndash;&gt;-->
		<!--<plugin type="com.brh.core.plugin.SerializablePlugin">-->
			<!--<property name="suppressJavaInterface" value="false"/>-->
		<!--</plugin>-->
		<!-- 为了防止生成的代码中有很多注释，比较难看，加入下面的配置控制 -->
		<commentGenerator>
			<property name="suppressAllComments" value="true" />
			<property name="suppressDate" value="true" />
		</commentGenerator>
		<!-- 注释控制完毕 -->

		<!-- 数据库连接 -->
		<!-- connectionURL="jdbc:mysql://192.168.0.107:3306/kamailio?characterEncoding=utf8" -->
		<jdbcConnection driverClass="com.mysql.jdbc.Driver"
			connectionURL="jdbc:mysql://127.0.0.1:3306/eshop?characterEncoding=utf8"
			userId="root" password="123456">
		</jdbcConnection>

		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>

		<!-- 数据表对应的model 层 -->
		<javaModelGenerator targetPackage="com.eshop.serviceweb.model"
			targetProject="src">
			<property name="enableSubPackages" value="true" />
			<property name="trimStrings" value="true" />

			<!-- for MyBatis3 / MyBatis3Simple
			是否创建一个不可变的类，如果为true，那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类-->
			<property name="immutable" value="false"/>

			<!-- 设置一个根对象，如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；
			在Table的rootClass属性中可以覆盖该选项注意：如果在key class或者record class中有root class相同的属性，
			MBG就不会重新生成这些属性了，包括：1，属性名相同，类型相同，有相同的getter/setter方法；-->
			<property name="rootClass" value="com.eshop.serviceweb.model.BaseModel"/>

			<!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
			<property name="trimStrings" value="true"/>
		</javaModelGenerator>

		<!-- sql mapper 隐射配置文件 -->
		<sqlMapGenerator targetPackage="com.eshop.serviceweb.mapper.xml"
			targetProject="src">
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>

		<!-- 在ibatis2 中是dao层，但在mybatis3中，其实就是mapper接口,
		对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
        targetPackage/targetProject:同javaModelGenerator
        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER-->
		<javaClientGenerator type="XMLMAPPER"
			targetPackage="com.eshop.serviceweb.mapper" targetProject="src">
			<property name="enableSubPackages" value="true" />
			<!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查
        	<property name="rootInterface" value="com.web.chat.mapper.BaseMapper"/>-->

		</javaClientGenerator>

		<!-- 要对那些数据表进行生成操作，必须要有一个. -->
		<!-- <table schema="test" tableName="user" domainObjectName="User" enableCountByExample="false" 
			enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" 
			selectByExampleQueryId="false"> </table> -->


		<!-- <table schema="smartbox" tableName="tl_sh_node" domainObjectName="Node" 
			enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" 
			enableSelectByExample="false" selectByExampleQueryId="false"> </table> -->

		<!-- <table schema="smartbox" tableName="tl_sh_device" domainObjectName="Device" 
			enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" 
			enableSelectByExample="false" selectByExampleQueryId="false"> </table> -->

		<!--  <table schema="smartbox" tableName="tl_sh_floor" domainObjectName="Floor" 
			enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" 
			enableSelectByExample="false" selectByExampleQueryId="false"> </table>  -->

		 <!-- <table schema="smartbox" tableName="tl_sh_room" domainObjectName="Room" enableCountByExample="false" 
			enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" 
			selectByExampleQueryId="false"> </table> -->

		<!-- <table schema="smartbox" tableName="tl_sh_node"
			domainObjectName="Node" enableCountByExample="false"
			enableUpdateByExample="false" enableDeleteByExample="false"
			enableSelectByExample="false" selectByExampleQueryId="false">
		</table> -->
		
		<table tableName="%"
			enableCountByExample="false"
			enableUpdateByExample="false" 
			enableDeleteByExample="false"
			enableSelectByExample="false" 
			selectByExampleQueryId="false">
            <property name="selectAllOrderByClause" value="sys_code desc"/>
			<!--去除生成的Mapper和实体带有表前缀前缀-->
			<domainObjectRenamingRule  searchString="^T" replaceString="" />
		</table> 

	</context>
</generatorConfiguration>